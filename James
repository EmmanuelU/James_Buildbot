#!/bin/bash

# parse options - credit aokp for idea
clear
if [ -f .james-build-log.txt ]
  then
    echo "Previous log exists, deleting..."
    	rm -rf .james-build-log.txt
clear
fi
if [ -f James~ ]
  then
    	rm -rf James~
clear
fi
. James.conf
if [ "$JAMES_ROM" = "" ]
then
	clear
	echo James: Rom not defined.
	echo
	exit 1
fi
rom=$JAMES_ROM 
romver=$JAMES_VERSION
pass=$JAMES_NETPASS
command=
ver=3.8.2
clean=
j=$JAMES_BUILDJOBS
if [ "$JAMES_BUILDJOBS" = "" ]
then
	j=j5
fi
outdate=$(date +%m%d%y)
date=$(date)
os=$(uname)
user=$(whoami)
java=$(type java)
md5=
admin=$JAMES_NETUSER
upload=
buildtype=Debug
TARGET_PRODUCT=$JAMES_PRODUCT
uploadurl=$JAMES_NETPATH
install=
shutdown=
script=$JAMES_BUILDSCRIPT
host=$JAMES_NETHOST
url=$JAMES_NETPATH
DEVICE=$JAMES_DEVICE
COMPANY=$JAMES_DEVICE_COMPANY
nightly_path=$JAMES_ROM_SHORT/Nightlies/"$rom"_Nightly_$outdate.zip
stable_path=$JAMES_ROM_SHORT/"$rom"-"$DEVICE"_v$romver.zip
# END
echo James v$ver was started --BEGIN LOG >>.james-build-log.txt
echo  >>.james-build-log.txt
while getopts ":c :h :s :u :n :r :q :p :a :b" opt
do
    case "$opt" in
        c) clean=true
	   command=1
	   echo clean=true >>.james-build-log.txt
        ;;

        s) sync=true
	   command=1
	   echo sync=true >>.james-build-log.txt
        ;;

        u) upload=true
        echo upload=true >>.james-build-log.txt
        command=1
        ;;

        q) shutdown=true
        echo shutdown=true >>.james-build-log.txt
        command=1
        ;;

        p) install=true
        echo install=true >>.james-build-log.txt
        command=1
        ;;

        a) alternate=true
        echo alternate=true >>.james-build-log.txt
        command=1
        ;;

        h) echo ===-- James Builder v$ver --===
        echo
	echo Usage: ./James -[OPTIONS]
	echo        
	echo  
	echo Options: 
	echo            
	echo [-h] - Show this message
	echo	
	echo [-s] - Sync the repo before building
	echo
	echo [-c] - Clean the enviroment before building
	echo
	echo [-q] - Shutdown Computer after Build
	echo
	echo [-p] - Push Rom to Device after Build
	echo
	echo [-a] - Use Alternative Device naming
	echo
	echo
	echo Upload build to FTP Server:
	echo	
	echo [-un] - Upload a Nightly
	echo	
	echo [-ur] - Upload a Stable Release
	echo
	echo Example: ./James -scunb
	echo
	exit 1	
        ;;

        \?)
	     echo "Usage: ./James -[OPTIONS] or use ./James -h for help"
	     echo
             echo "invalid option: -$OPTARG"
             exit 1
        ;;

        n)
	if [ "$upload" != "true" ] ; then
	echo "You are not uploading so no need for -n or -r"
	exit 1
	fi
	if [ "$buildtype" = "Release" ] ; then
	echo You cannot use -n and -r together.
	echo "invalid option: -$OPTARG"
	exit 1
	fi    
	command=1
	buildtype=Nightly
	echo buildtype=$buildtype >>.james-build-log.txt 
	uploadurl=$url$nightly_path
	uploadurl2=$url2$nightly_path
        ;;

        r)
	if [ "$upload" != "true" ] ; then
	echo "You are not uploading so no need for -n or -r"
	exit 1
	fi
	if [ "$buildtype" = "Nightly" ] ; then
	echo You cannot use -n and -r together.
	exit 1
	fi    
	command=1
	buildtype=Release 
	echo buildtype=$buildtype >>.james-build-log.txt 
	uploadurl=$url$stable_path
	uploadurl2=$url2$stable_path
        ;;
    esac
done
if [ "$buildtype" = "Debug" ]
	then 
	if [ "$upload" = "true" ]
	then
		echo "You must specify a buildtype"
		echo "Use [-n] for Nightly or [-r] for Stable release"
		exit -1
	fi
fi
clear
echo Running Start-up checks .
sleep 1
echo
if [ ! -d "device/$COMPANY/$DEVICE" ]
  then
    echo "No $rom build device directory found!"
    	sleep 2
		echo exiting...
			sleep 1
				exit
fi
if [ -d "device/$COMPANY/$DEVICE" ]
  then
    echo "$rom build device directory found!"
    	sleep 2
fi
if [ ! -d "vendor/james" ]
  then
    mkdir vendor/james
fi
echo "PRODUCT_PROPERTY_OVERRIDES += ro.kang.type=$buildtype" > vendor/james/James.mk
clear
echo Running Start-up checks ..
echo >>app.sh
## Will add download scripts for missing files later
echo command -v java >/dev/null 2>&1 || { echo >&2 "Java is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v adb >/dev/null 2>&1 || { echo >&2 "Java is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v repo >/dev/null 2>&1 || { echo >&2 "Repo binary is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v ccache >/dev/null 2>&1 || { echo >&2 "Ccache binary is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v make >/dev/null 2>&1 || { echo >&2 "Make is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v mka >/dev/null 2>&1 || { echo >&2 "mka (make) is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v wget >/dev/null 2>&1 || { echo >&2 "wget is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v wput >/dev/null 2>&1 || { echo >&2 "wput is not installed"; sleep 2; exit 1;} >>app.sh
chmod +x app.sh
./app.sh
rm app.sh
echo 
echo All required packages are installed | tee -a .james-build-log.txt
echo  >>.james-build-log.txt
sleep 2
clear
echo Running Start-up checks ...
sleep 1
if [ -d "out/target/product/$DEVICE" ] 
	then
	echo
	echo Deleting old outfiles ...
	cd out/target/product/$DEVICE	
	rm -rf *.zip
	rm -rf *.md5
	rm -rf *.md5sum
	rm -rf *.img
	rm -rf *.cpio
	rm -rf system/build.prop
	cd ../../../..
fi
sleep 1
echo 
echo You are on $os
echo $java
java -version
sleep 3
clear
sleep 2
clear
echo Passed startup checks! >>.james-build-log.txt
echo  >>.james-build-log.txt
echo ===-- James Builder v$ver --===
echo 
echo Hello, my name is James! Nice to meet you $user
echo
echo I keep a log of all my actions in .james-build-log.txt
echo ==========================
echo It is $date
echo
if [ "$sync" = "true" ]
	then 
	echo Syncing...  
	repo sync -$j -f | tee -a .james-build-log.txt
	. James.conf
	rom=$JAMES_ROM 
	romver=$JAMES_VERSION
fi  
clear
echo Type: $buildtype
echo =========
echo Setting up build enviroment...
sleep 2
echo 
echo >>.james-build-log.txt
echo 
export USE_CCACHE=1 | tee -a .james-build-log.txt
echo >>.james-build-log.txt
prebuilt/linux-x86/ccache/ccache -M 100G | tee -a .james-build-log.txt
prebuilts/misc/linux-x86/ccache/ccache -M 100G | tee -a .james-build-log.txt
echo >>.james-build-log.txt
echo 
clear
echo >>.james-build-log.txt
echo "$buildtype for $TARGET_PRODUCT"
echo =========
sleep 2
if [ "$clean" = "true" ]
	then 
	echo Cleaning...  
	make clobber -$j | tee -a .james-build-log.txt
fi  
echo =========
echo
clear
echo "Building $buildtype for $TARGET_PRODUCT ..."
echo "Building for $TARGET_PRODUCT on $TARGET_BUILD_VARIANT at $date" >>.james-build-log.txt
echo >>.james-build-log.txt
if [ -f .build.sh ]
  then
    rm .build.sh
fi
echo echo Locating trees... >>.build.sh
echo sleep 2 >>.build.sh 
echo . build/envsetup.sh >>.build.sh
echo echo >>.build.sh
echo echo Found trees >>.build.sh
echo echo >>.build.sh
echo "echo Lunching for $TARGET_PRODUCT" >>.build.sh
echo lunch $TARGET_PRODUCT-userdebug >>.build.sh
echo echo >>.build.sh
echo echo Compiling ... >>.build.sh
echo $script bacon >>.build.sh
chmod +x .build.sh
./.build.sh | tee -a .james-build-log.txt
echo >>.james-build-log.txt
rm -rf .build.sh
echo
sleep 2
cd out/target/product/$DEVICE
if [ ! -f $TARGET_PRODUCT-ota-eng.$user.zip ]
  then
    echo There was an error building ...
    exit 1
fi
md5=$(md5sum $TARGET_PRODUCT-ota-eng.$user.zip | awk '{ print $1 }')
echo $TARGET_PRODUCT-ota-eng.$user.zip MD5: $md5
echo
if [ "$install" = "true" ]
	then
	echo "Waiting for Device ..."
	adb wait-for-device
	echo
	echo Device Found ...
	echo
	echo Rebooting into Recovery ...
	adb reboot recovery
	sleep 17
	echo
	echo Pushing $TARGET_PRODUCT-ota-eng.$user.zip to /sdcard/ on device ...
	adb push $TARGET_PRODUCT-ota-eng.$user.zip /sdcard/
	echo
	
fi
if [ "$upload" = "true" ]
	then
	echo
	echo Hello $user, uploading $buildtype to $uploadurl
	echo -----------------------------------------------
	echo
	wput -v $TARGET_PRODUCT-ota-eng.$user.zip "$uploadurl"
	echo 
	echo Uploaded 1st Zip
fi
if [ "$upload2" = "true" ]
	then
	echo
	echo Hello $user, uploading $buildtype to $uploadurl2
	echo -----------------------------------------------
	echo
	wput -v $TARGET_PRODUCT-ota-eng.$user.zip "$uploadurl2"
	echo 
	echo Uploaded 2nd Zip
fi
if [ "$shutdown" = "true" ]
	then
	echo	
	echo Shutting Down ...
	echo $pass | sudo shutdown -S -h now
	
fi
echo
echo $TARGET_PRODUCT-ota-eng.$user.zip MD5: $md5
echo
echo I am done with session, enjoy ":)" -James
exit 1
