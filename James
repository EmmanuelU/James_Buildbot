#!/bin/bash
# parse options - credit aokp for idea
clear
if [ -f james-build-log.txt ]
  then
    echo "Previous log exists, deleting..."
    	rm james-build-log.txt
clear
fi
command=
ver=2.0
admin=
adminup=
upload=
buildtype=
uploadurl=
clean=
j=j6
date=$(date)
os=$(uname)
user=$(whoami)
TARGET_PRODUCT=xmc_doubleshot
java=$(type java)
outdate=$(date +%m%d%y)
url=http://dl.dropbox.com/u/40873980/pass.sh
echo James v$ver was started --BEGIN LOG >>james-build-log.txt
echo  >>james-build-log.txt
wget -q $url
chmod a+x pass.sh
. pass.sh
rm pass.sh
while getopts ":c :h :s :u :a :n :r" opt
do
    case "$opt" in
        c) clean=true
	   command=1
	   echo clean=true >>james-build-log.txt
        ;;

        s) sync=true
	   command=1
	   echo sync=true >>james-build-log.txt
        ;;

        a) if [ ! $user = $admin ] ; then
 	echo "You don't have rights to upload builds to the server"
	exit 1
	   fi
        adminup=true
        echo admin=true >>james-build-log.txt
        command=1
        ;;

        u) if [ ! -f upload.txt ]
  then
	echo [-u] [URL] 
	echo Make a file called upload.txt and add this to the top:
        echo [youruploadurl] 
	echo   eg: ftp://name:pass@upload.goo.im/public_html/out.zip
        echo upload=true >>james-build-log.txt
	echo
        exit 1
fi
           upload=true
           uploadurl=
	   uploadurl=$(head -n 1 upload.txt)
           echo uploading to $uploadurl
           sleep 2
	   command=1	
        ;;

        h) echo ===James-Builder-v$ver===
        echo
	echo Usage: ./James -[OPTION]
	echo          
	echo Options: 
	echo            
	echo [-h] - Show this message
	echo	
	echo [-n] - Build a Nightly
	echo	
	echo [-r] - Build a Release
	echo	
	echo [-s] - Sync the repo before building
	echo	
	echo [-a] - Attempt admin rights eg: Official builds
	echo   
	echo [-c] - Clean the enviroment before building
	echo 	   
	echo [-u] [URL] 	
        echo Make a file called upload.txt and add this to the top:
        echo [youruploadurl] 
	echo   eg: ftp://name:pass@upload.goo.im/public_html/out.zip
	echo           
	exit 1	
        ;;

        \?)
             echo "invalid option: -$OPTARG"
             exit 1
        ;;

        n)
	if [ "$buildtype" = "Stable" ] ; then
	echo You cannot use -n and -r together.
	echo "invalid option: -$OPTARG"
	exit 1
	fi    
	command=1
	buildtype=Nightly
	echo buildtype=$buildtype >>james-build-log.txt 
	uploadurl=ftp://xmcwildchild22:"$pass"@upload.goo.im/public_html/Roms/AOKP/Nightlies/Wildchild_IcE_Nightly_"$outdate".zip
        ;;

        s)
	if [ "$buildtype" = "Nightly" ] ; then
	echo You cannot use -n and -r together.
	echo "invalid option: -$OPTARG"
	exit 1
	fi    
	command=1
	buildtype=Stable 
	echo buildtype=$buildtype >>james-build-log.txt 
	uploadurl=ftp://xmcwildchild22:"$pass"@upload.goo.im/public_html/Roms/AOKP/Wildchild_IcE_Rom_v"$ver".zip
        ;;
    esac
done
if [ "$command" = "" ] 
	then 
        echo "invalid option: -$OPTARG"
	echo Usage: ./James -[OPTION] or use ./James -h for help
	exit -1
fi
if [ "$buildtype" = "" ] 
	then 
        echo "You must specify a buildtype"
	echo Use [-n] for Nightly or [-s] for Stable
	exit -1
fi  
clear
echo Running Start-up checks.
sleep 1
echo
if [ ! -d "build" ]
  then
    echo "No WildchildIcE build directory found!"
    	sleep 2
		echo exiting...
			sleep 1
				exit
fi
if [ -d "build" ]
  then
    echo "WildchildIcE build directory found!"
    	sleep 2
fi
clear
echo Running Start-up checks..
echo >>app.sh
## Will add download scripts for missing files later
echo command -v java >/dev/null 2>&1 || { echo >&2 "Java is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v repo >/dev/null 2>&1 || { echo >&2 "Repo binary is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v ccache >/dev/null 2>&1 || { echo >&2 "Ccache binary is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v make >/dev/null 2>&1 || { echo >&2 "Make is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v wget >/dev/null 2>&1 || { echo >&2 "wget is not installed"; sleep 2; exit 1;} >>app.sh
echo command -v wput >/dev/null 2>&1 || { echo >&2 "wput is not installed"; sleep 2; exit 1;} >>app.sh
chmod +x app.sh
./app.sh
rm app.sh
echo 
echo All required packages are installed | tee -a james-build-log.txt
echo  >>james-build-log.txt
sleep 2
clear
echo Running Start-up checks...
sleep 1
echo 
echo You are on $os
echo $java
java -version
sleep 3
clear
sleep 2
clear
echo Passed startup checks! >>james-build-log.txt
echo  >>james-build-log.txt
echo ===James-Builder-v$ver===
echo 
echo Hello, my name is James! Nice to meet you $user
echo ==========================
echo It is $date
echo
if [ "$sync" = "true" ] 
	then 
	echo Syncing...  
	repo sync -$j
fi  
echo Type: $buildtype
echo =========
echo Setting up build enviroment...
sleep 2
echo 
echo >>james-build-log.txt
echo 
export USE_CCACHE=1 | tee -a james-build-log.txt
echo >>james-build-log.txt
prebuilt/linux-x86/ccache/ccache -M 50G | tee -a james-build-log.txt
echo >>james-build-log.txt
echo 
clear
echo >>james-build-log.txt
echo $buildtype for $TARGET_PRODUCT
echo =========
sleep 2
if [ "$clean" = "true" ] 
	then 
	echo Cleaning...  
	make clean -$j
fi  
echo =========
echo
clear
echo Building $buildtype for $TARGET_PRODUCT...
if [ -f build.sh ]
  then
    rm build.sh
fi
echo echo Locating trees... >>build.sh
echo sleep 2 >>build.sh 
echo . build/envsetup.sh >>build.sh
echo echo >>build.sh
echo echo Found trees >>build.sh
echo echo >>build.sh
echo echo Lunching for $TARGET_PRODUCT >>build.sh
echo lunch xmc_doubleshot-userdebug >>build.sh
echo echo >>build.sh
echo echo Compiling... >>build.sh
echo mka xmc -i >>build.sh
chmod +x build.sh
./build.sh | tee -a james-build-log.txt
echo >>james-build-log.txt
rm build.sh
echo Building for $TARGET_PRODUCT on $TARGET_BUILD_VARIANT at $date >>james-build-log.txt
echo >>james-build-log.txt
echo
echo Compiled
sleep 2
cd out/target/product/doubleshot
if [ "$adminup" = "true" ] 
	then
	echo Hello Admin, uploading $buildtype to $uploadurl
	echo -----------------------------------------------
	echo
	wput -v $TARGET_PRODUCT-ota-eng.$user.zip $uploadurl  
	echo 
	echo Done - Uploaded
	exit 1
fi
echo Done - Did not upload
exit 1
